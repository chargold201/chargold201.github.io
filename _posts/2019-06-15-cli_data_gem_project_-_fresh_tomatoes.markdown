---
layout: post
title:      "CLI Data Gem Project - Fresh Tomatoes"
date:       2019-06-15 11:43:28 +0000
permalink:  cli_data_gem_project_-_fresh_tomatoes
---


For our first Flatiron project, we were tasked with creating a CLI program that scraped a website two levels deep. I have to admit, I struggled with coming up with an idea for this project. I finally decided on scraping Product Hunt, a website where users can upvote tech tools and apps. I planned on scraping the current day's most popular products, listing them by name, allowing the user to choose one, and presenting more information about it. However, when I went to inspect the site, I realized that it was nearly impossible to scrape. I decided to change my concept and scrape Rotten Tomatoes, a movie rating site, for their "Certified Fresh" movies currently in theaters. 

My first step was to setup the files I would need using bundler. I ran bundle gem in my terminal to automatically create the skeleton of my program. I then made my initial commit to GitHub. Next, I started building out my CLI class, including some `puts` and `gets` for interaction with the user, as well as some psuedocode since I hadn't yet written my Scraper or Movie classes. Once this was more or less done, I created my Movie class. Based on the pseudocode that I had written in my CLI class, I knew that I was going to want a class variable to hold all of the movies so that I could iterate over them to produce a list, so I created an `@@all` class variable, set equal to an empty array, and also created a `self.all` class getter method to return the value of that variable. I also knew that I wanted each movie to be instantiated with a title, a url, and a tomatometer score, as these were all details available on the first level page that I would be scraping. I made these arguments for the `initialize` method and set instance variables equal to the values of those arguments, as well as creating `attr_reader`s for them. I also created `attr_accessor`s for description, rating, runtime, and audience rating, which would all be scraped from the second-level page for each movie.

When I started to create the Scraper class, I ran into a problem. It appeared that the HTML on the Certified Fresh In Theaters page was dynamically generated by Javascript in order to allow the user to choose whether to view the movies as a grid or a list. Therefore, I was not able to scrape this page. Thankfully, after some digging I was able to find another page that listed the freshest movies in a sidebar, so I decided to use this. In the Scraper class, I used a class variable to hold the URL of the page, and created two class methods, one for scraping the main page and one for scraping the detail pages.

My program now worked! When I ran it, I was greeted and presented with the list of movies. If I chose one, I was given the details. However, the program then exited as I hadn't created a loop structure yet. I had some trouble figuring out where exactly to put the loop and what type of loop to use, but I finally got it figured out. I decided to use a regular `loop` and put it in the `run` method.

The next step was to make sure I took edge cases into account. First I made sure that, in the `pick_movie` method, when the program asked for the number of a movie, the only valid input from the user would be a number between 1 and `FreshTomatoes::Movie.all.length`, otherwise they would get a message saying the input was invalid and asked to enter new input. Next, I went into the loop in the `run` method when the user is asked if they would like to view information on another movie. I ensured that the only valid responses would be "yes", "no", "y", or "n".

The final step was making sure that the second level pages were never scraped more than once, if a user put the same number in a second time. I did this by simply using an `unless` statement when I called the `FreshTomatoes::Scraper.scrape_details` method from the `pick_movie` method in the CLI class. Since the movie description variable is only set when the page is scraped, the statement `FreshTomatoes::Scraper.scrape_details(movie) unless movie.description` worked in order to prevent unneccessary scraping.

This project was definitely a challenge, as I had never created something from scratch before. However, I learned a lot from it and it helped to solidify my understanding about many topics. I hope to continue working on this and adding functionality since I ran out of time before turning it into what I truly think it could be!
